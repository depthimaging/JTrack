# op <- options(digits.secs=6)
json_data[[cid]][[tailpos]]$time = strptime(json_data[[cid]][[tailpos]]$time, format = "%H:%M:%OS")#, format = "%H:%M:%OS")
json_data[[cid]][[tailpos]]$camera = cid
#Find starting & ending times
print("Start time: ")
start = head(json_data[[cid]][[tailpos]]$time, 1)
print(start)
print("End time: ")
end = tail(json_data[[cid]][[tailpos]]$time, 1)
print(end)
#Find the duration
print("Duration: ")
print(end-start)
}
# c_name = paste("c", cid, sep = "")
# names(json_data[[cid]][startpos:length(json_data[[cid]])]) = c(columns)
# columns = NA
}
source("loc2glob.R")
globalized_json = loc2glob(json_data)
source("trajectory.R")
globalized_tracks = create_trajectories(globalized_json)
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
movpat[[ti]] = mov_pat
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
movpat
egtrack = globalized_tracks[[3]]
source("find_stops.R")
mov_pat
library(sp)
stop = c(0)
nop = c(0)
perc = c(0)
egtrack
mov_pat = data.frame(stop,nop,perc,dur)
length_egtrack = dim(egtrack)[1]
bool_stop = vector(length = length_egtrack-1)
dist_window_m = 0.5
#Temporal window = 1.5 seconds
i = 2
while(i < length_egtrack-1)
{
sum_dist = egtrack@connections$distance[[i-1]] + egtrack@connections$distance[[i]] + egtrack@connections$distance[[i+1]]
if(sum_dist <= dist_window_m)
{
bool_stop[i] = TRUE
}
i = i+1
}
egtrack_coords = coordinates(egtrack)[1:dim(egtrack)-1,]
times = as.POSIXct(egtrack@sp$time[1:dim(egtrack)[1]-1])
times
bpds = as.data.frame(cbind(egtrack_coords, bool_stop,times))
find_diffs_it = function(xyb)
{
flag = TRUE
breaklist = c()
x = 1
dimx = dim(xyb)[1]
while(x < dimx)
{
z = 1
while(xyb[x,3] == xyb[x+1,3] && x < dimx)
{
x = x+1
if(x >= dimx)
{
flag = FALSE
}
}
breaklist = append(breaklist, x)
if(!flag) break
x = x+1
if(x >= dimx) flag = FALSE
while(x+1 <= dimx && xyb[x,3] == xyb[x+1,3])
{
x = x+1
if(x >= dimx)
{
flag = FALSE
}
}
if(flag)
{
x = x+1
breaklist = append(breaklist, x)
} else {
breaklist = append(breaklist, dimx)
}
}
return(breaklist[1:length(breaklist)-1])
}
stop_it = function(xyb)
{
#mov_pat = rbind(mov_pat, c(4,4,4))
#mov_pat[2,1] = 2
#bpds[1,3] = 1
#xyb = bpds
dimx = dim(xyb)[1]
x = 0
k = 2
while(x< dimx){
x=x+1
cur = xyb[x,3]
if(x==1) {
mov_pat = rbind(mov_pat,c(cur,1,10,xyb[x,4]))
next
}
prev = xyb[x-1,3]
if(cur != prev){
t1 = mov_pat[k,4]
t2 = xyb[x,4]
res = difftime(as.POSIXct(t2,origin="1970-01-01"), as.POSIXct(t1,origin="1970-01-01"), units = "secs")
mov_pat[k,4] = res
k=k+1
mov_pat = rbind(mov_pat,c(cur,0,10,xyb[x,4]))
}
mov_pat[k,2] = mov_pat[k,2] + 1
if(x==dimx-1) {
t1 = mov_pat[k,4]
t2 = xyb[x,4]
res = difftime(as.POSIXct(t2,origin="1970-01-01"), as.POSIXct(t1,origin="1970-01-01"), units = "secs")
mov_pat[k,4] = res
}
}
mov_pat = data.frame(mov_pat[2:dim(mov_pat)[1],])
percentage = 100/sum(mov_pat$dur)
perc = mov_pat$dur * percentage
mov_pat = cbind(mov_pat,"percentage"=perc)
return(mov_pat)
}
stop_it(bpds)
mov_pat
mov_pat = stop_it(bpds)
mov_pat
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
egtrack = globalized_tracks[[3]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
movpat[[ti]] = mov_pat
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
movpat[[ti]] = mov_pat
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
movpat
xxx = c()
xxx$tracks= mov_pat
xxx$tracks= movpat
xxx = c()
xxx$tracks= movpat
xxx
View(xxx)
meta = toJSON(xxx)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
writeLines(movpat, paste("../statvis","/data/meta.json",sep="") )
movpat
meta = toJSON(movpat)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
meta$tracks = toJSON(movpat)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
meta$tracks = toJSON(movpat)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
xxx = c()
xxx$tracks= movpat
meta = toJSON(xxx)
meta = toJSON(xxx)
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
movpat[ti,] = mov_pat
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
movpat[[ti]] = mov_pat
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
View(movpat)
View(mov_pat)
meta = toJSON(unname(split(xxx, 1:nrow(res1))))
meta = toJSON(unname(split(xxx, 1:nrow(xxx))))
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
mov_pat
mov_pat = cbind(mov_pat,rep(ti,dim(mov_pat)[1]))
mov_pat
source("find_stops.R")
mov_pat
mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
mov_pat
movpat
#Note: Some comments in this code are OUTDATED!!
library('jsonlite')
#initialize a list of 3 lists
#each sub-lists for each camera
json_data = list(c1 = list(), c2 = list(), c4 = list())
files = list.files(path = "field/", pattern = "*.json", recursive = TRUE, full.names = TRUE)
for(filename_w_path in files)
{
#import json values as text from json file
json_value = readLines(filename_w_path, n = -1, warn = FALSE)
# ============ The following lines for each camera ==========================
#read meta information from JSON char string with position numbers.
#Can be made dynamic to get the position numbers using grep - but can also result in pitfalls!
#For now since the JSON structure is consistent, this is enough.
cid = as.numeric(substr(json_value, 12, 13))
# height = as.numeric(substr(json_value, 104, 107))
# global_x = as.numeric(substr(json_value, 125, <end position here>))
# global_y = as.numeric(substr(json_value, 147, <end position here>))
# global_z = as.numeric(substr(json_value, 169, <end position here>))
# tilt = as.numeric(substr(json_value, 185, <end position here>))
#Combine camera information into a dataframe
#The other variables mentioned above have to be added too.
# cinfo = data.frame(cid, height)
# ==============================================================================
#remove the extra header in the data to make it compatible with the JSON format
#replace the 1st occurence of square brackets and anything inside the square brackets with an empty string ("") effectively deleting it
sample_json = sub("*\\[.*?\\] *", "", json_value)
#read the variable as a valid json
sample_json = jsonlite::fromJSON(sample_json)
sample_json = sample_json$bodies_data
#Since there is no camera 3; a makeshift solution
if(cid == 4) cid = 3
# columns = c()
# startpos = 0
#Note: going through each directory on the disk: c1, c2 and c4 might have to be implemented to import data recursively
#go through each of the data frames in sample_json and store them in the correct sub-list of json_data according to the camera
for(i in 1:length(sample_json))
{
# columns = c(columns, names(sample_json[i]))
tailpos = length(json_data[[cid]]) + 1
# if(i == 1) startpos = tailpos
#In the next line: "json_data$c1" might have to be made dynamic by changing it to json_data[1], for example
#This can be done after implementing recursive directory traversal (see "Note" above)
json_data[[cid]][tailpos] = sample_json[i]
#access by: json_data$c1[[i]]$x, json_data$c1[[i]]$time etc.
#converting "time" to POSIX time
# op <- options(digits.secs=6)
json_data[[cid]][[tailpos]]$time = strptime(json_data[[cid]][[tailpos]]$time, format = "%H:%M:%OS")#, format = "%H:%M:%OS")
json_data[[cid]][[tailpos]]$camera = cid
#Find starting & ending times
print("Start time: ")
start = head(json_data[[cid]][[tailpos]]$time, 1)
print(start)
print("End time: ")
end = tail(json_data[[cid]][[tailpos]]$time, 1)
print(end)
#Find the duration
print("Duration: ")
print(end-start)
}
# c_name = paste("c", cid, sep = "")
# names(json_data[[cid]][startpos:length(json_data[[cid]])]) = c(columns)
# columns = NA
}
source("loc2glob.R")
globalized_json = loc2glob(json_data)
source("trajectory.R")
globalized_tracks = create_trajectories(globalized_json)
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
movpat = rbind(movpat,mov_pat)
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
View(movpat)
l = c()
trackCount = 1
for(i in 1:(length(globalized_json)-1))
xxx = c()
xxx$tracks= movpat
meta = toJSON(unname(split(xxx, 1:nrow(xxx))))
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
xxx = c()
xxx$tracks= movpat
meta = toJSON(unname(split(xxx, 1:nrow(xxx))))
movpat
xxx = c()
xxx
xxx$tracks= movpat
xxx
meta = toJSON(unname(split(xxx, 1:nrow(xxx))))
meta = toJSON(xxx)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
#mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
movpat[paste("t0",ti,sep="")] = mov_pat
#movpat = rbind(movpat,mov_pat)
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
View(movpat)
View(movpat$t01)
mov_pat
ti
movpat = data.frame()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
#mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
movpat[paste("t0",ti,sep="")] = mov_pat
#movpat = rbind(movpat,mov_pat)
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
View(movpat)
View(movpat$t01)
movpat = data.frame()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
#mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
movpat[[paste("t0",ti,sep="")]] = mov_pat
#movpat = rbind(movpat,mov_pat)
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
movpat = c()
ti=0
for(tri in 1:(length(globalized_json)-1))
{
for(trj in 1:length(globalized_json[[tri]]))
{
ti=ti+1
if(ti==2 || ti==9)
next
egtrack = globalized_tracks[[ti]]
source("find_stops.R")
if(dim(bpts_df)[1]==0){
next
}
#mov_pat = cbind(mov_pat,"trk"=rep(ti,dim(mov_pat)[1]))
movpat[[paste("t0",ti,sep="")]] = mov_pat
#movpat = rbind(movpat,mov_pat)
globalized_json[[tri]][[trj]]$stop = rep(1,dim(globalized_json[[tri]][[trj]])[1])
for(k in 1:(dim(bpts_df)[1]))
{
globalized_json[[tri]][[trj]]$stop[bpts_df[k,1]:bpts_df[k,2]]=0
}
print( paste("aafsesef: ",toString(trj)))
}
}
View(egtrack)
View(movpat)
xxx = c()
xxx$tracks= movpat
#meta = toJSON(unname(split(xxx, 1:nrow(xxx))))
meta = toJSON(xxx)
writeLines(meta, paste("../statvis","/data/meta.json",sep="") )
x = 1234
trunc(x / 10 ^ nchar(x) * 100)
trunc(x / 10 ^ nchar(x) * 100)
x = 1
trunc(x / 10 ^ nchar(x) * 100)
